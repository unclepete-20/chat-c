/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: chat.proto */

#ifndef PROTOBUF_C_chat_2eproto__INCLUDED
#define PROTOBUF_C_chat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct ChatSistOS__UserList ChatSistOS__UserList;
typedef struct ChatSistOS__UsersOnline ChatSistOS__UsersOnline;
typedef struct ChatSistOS__UserOption ChatSistOS__UserOption;
typedef struct ChatSistOS__Answer ChatSistOS__Answer;
typedef struct ChatSistOS__User ChatSistOS__User;
typedef struct ChatSistOS__NewUser ChatSistOS__NewUser;
typedef struct ChatSistOS__Status ChatSistOS__Status;
typedef struct ChatSistOS__Message ChatSistOS__Message;


/* --- enums --- */


/* --- messages --- */

struct  ChatSistOS__UserList
{
  ProtobufCMessage base;
  /*
   * verdadero = usuarios conectados
   * falso = usuario especifico
   */
  protobuf_c_boolean list;
  /*
   * se manda vacio si es para todos, nombre de usuario si es especifico
   */
  char *user_name;
};
#define CHAT_SIST_OS__USER_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__user_list__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  ChatSistOS__UsersOnline
{
  ProtobufCMessage base;
  /*
   * Lista de usuarios
   */
  size_t n_users;
  ChatSistOS__User **users;
};
#define CHAT_SIST_OS__USERS_ONLINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__users_online__descriptor) \
    , 0,NULL }


struct  ChatSistOS__UserOption
{
  ProtobufCMessage base;
  /*
   * opcion a realizar
   */
  int32_t op;
  /*
   * crear nuevo usuario
   */
  ChatSistOS__NewUser *createuser;
  /*
   * ver usuarios conectados/ver estado de usuario
   */
  ChatSistOS__UserList *userlist;
  /*
   * cambiar estado de usuario
   */
  ChatSistOS__Status *status;
  /*
   * enviar mensaje
   */
  ChatSistOS__Message *message;
};
#define CHAT_SIST_OS__USER_OPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__user_option__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


struct  ChatSistOS__Answer
{
  ProtobufCMessage base;
  /*
   * opcion recibida
   */
  int32_t op;
  /*
   * 400 error, 200 OK
   */
  int32_t response_status_code;
  /*
   * Mensaje de respuesta
   */
  char *response_message;
  /*
   * Lista de usuarios
   */
  ChatSistOS__UsersOnline *users_online;
  /*
   * Mensaje recibido
   */
  ChatSistOS__Message *message;
  /*
   * Usuario 
   */
  ChatSistOS__User *user;
  /*
   * Status del usuario
   */
  ChatSistOS__Status *status;
};
#define CHAT_SIST_OS__ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__answer__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, NULL, NULL, NULL, NULL }


struct  ChatSistOS__User
{
  ProtobufCMessage base;
  /*
   * Nombre de usuario
   */
  char *user_name;
  /*
   * IP del usuario
   */
  char *user_ip;
  /*
   * status del usuario
   */
  int32_t user_state;
};
#define CHAT_SIST_OS__USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__user__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  ChatSistOS__NewUser
{
  ProtobufCMessage base;
  /*
   * Nombre de usuario
   */
  char *username;
  /*
   * IP del usuario
   */
  char *ip;
};
#define CHAT_SIST_OS__NEW_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__new_user__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  ChatSistOS__Status
{
  ProtobufCMessage base;
  char *user_name;
  /*
   * 1 en linea, 2 ocupado, 3 desconectado
   */
  int32_t user_state;
};
#define CHAT_SIST_OS__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__status__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  ChatSistOS__Message
{
  ProtobufCMessage base;
  /*
   * false = se manda a todos, true = mensaje directo
   */
  protobuf_c_boolean message_private;
  /*
   * Vacio si es para todos, nombre de usuario si es directo
   */
  char *message_destination;
  /*
   * Contenido del mensaje
   */
  char *message_content;
  /*
   * Usuario que lo manda
   */
  char *message_sender;
};
#define CHAT_SIST_OS__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_sist_os__message__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* ChatSistOS__UserList methods */
void   chat_sist_os__user_list__init
                     (ChatSistOS__UserList         *message);
size_t chat_sist_os__user_list__get_packed_size
                     (const ChatSistOS__UserList   *message);
size_t chat_sist_os__user_list__pack
                     (const ChatSistOS__UserList   *message,
                      uint8_t             *out);
size_t chat_sist_os__user_list__pack_to_buffer
                     (const ChatSistOS__UserList   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__UserList *
       chat_sist_os__user_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__user_list__free_unpacked
                     (ChatSistOS__UserList *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__UsersOnline methods */
void   chat_sist_os__users_online__init
                     (ChatSistOS__UsersOnline         *message);
size_t chat_sist_os__users_online__get_packed_size
                     (const ChatSistOS__UsersOnline   *message);
size_t chat_sist_os__users_online__pack
                     (const ChatSistOS__UsersOnline   *message,
                      uint8_t             *out);
size_t chat_sist_os__users_online__pack_to_buffer
                     (const ChatSistOS__UsersOnline   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__UsersOnline *
       chat_sist_os__users_online__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__users_online__free_unpacked
                     (ChatSistOS__UsersOnline *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__UserOption methods */
void   chat_sist_os__user_option__init
                     (ChatSistOS__UserOption         *message);
size_t chat_sist_os__user_option__get_packed_size
                     (const ChatSistOS__UserOption   *message);
size_t chat_sist_os__user_option__pack
                     (const ChatSistOS__UserOption   *message,
                      uint8_t             *out);
size_t chat_sist_os__user_option__pack_to_buffer
                     (const ChatSistOS__UserOption   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__UserOption *
       chat_sist_os__user_option__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__user_option__free_unpacked
                     (ChatSistOS__UserOption *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__Answer methods */
void   chat_sist_os__answer__init
                     (ChatSistOS__Answer         *message);
size_t chat_sist_os__answer__get_packed_size
                     (const ChatSistOS__Answer   *message);
size_t chat_sist_os__answer__pack
                     (const ChatSistOS__Answer   *message,
                      uint8_t             *out);
size_t chat_sist_os__answer__pack_to_buffer
                     (const ChatSistOS__Answer   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__Answer *
       chat_sist_os__answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__answer__free_unpacked
                     (ChatSistOS__Answer *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__User methods */
void   chat_sist_os__user__init
                     (ChatSistOS__User         *message);
size_t chat_sist_os__user__get_packed_size
                     (const ChatSistOS__User   *message);
size_t chat_sist_os__user__pack
                     (const ChatSistOS__User   *message,
                      uint8_t             *out);
size_t chat_sist_os__user__pack_to_buffer
                     (const ChatSistOS__User   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__User *
       chat_sist_os__user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__user__free_unpacked
                     (ChatSistOS__User *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__NewUser methods */
void   chat_sist_os__new_user__init
                     (ChatSistOS__NewUser         *message);
size_t chat_sist_os__new_user__get_packed_size
                     (const ChatSistOS__NewUser   *message);
size_t chat_sist_os__new_user__pack
                     (const ChatSistOS__NewUser   *message,
                      uint8_t             *out);
size_t chat_sist_os__new_user__pack_to_buffer
                     (const ChatSistOS__NewUser   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__NewUser *
       chat_sist_os__new_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__new_user__free_unpacked
                     (ChatSistOS__NewUser *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__Status methods */
void   chat_sist_os__status__init
                     (ChatSistOS__Status         *message);
size_t chat_sist_os__status__get_packed_size
                     (const ChatSistOS__Status   *message);
size_t chat_sist_os__status__pack
                     (const ChatSistOS__Status   *message,
                      uint8_t             *out);
size_t chat_sist_os__status__pack_to_buffer
                     (const ChatSistOS__Status   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__Status *
       chat_sist_os__status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__status__free_unpacked
                     (ChatSistOS__Status *message,
                      ProtobufCAllocator *allocator);
/* ChatSistOS__Message methods */
void   chat_sist_os__message__init
                     (ChatSistOS__Message         *message);
size_t chat_sist_os__message__get_packed_size
                     (const ChatSistOS__Message   *message);
size_t chat_sist_os__message__pack
                     (const ChatSistOS__Message   *message,
                      uint8_t             *out);
size_t chat_sist_os__message__pack_to_buffer
                     (const ChatSistOS__Message   *message,
                      ProtobufCBuffer     *buffer);
ChatSistOS__Message *
       chat_sist_os__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_sist_os__message__free_unpacked
                     (ChatSistOS__Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ChatSistOS__UserList_Closure)
                 (const ChatSistOS__UserList *message,
                  void *closure_data);
typedef void (*ChatSistOS__UsersOnline_Closure)
                 (const ChatSistOS__UsersOnline *message,
                  void *closure_data);
typedef void (*ChatSistOS__UserOption_Closure)
                 (const ChatSistOS__UserOption *message,
                  void *closure_data);
typedef void (*ChatSistOS__Answer_Closure)
                 (const ChatSistOS__Answer *message,
                  void *closure_data);
typedef void (*ChatSistOS__User_Closure)
                 (const ChatSistOS__User *message,
                  void *closure_data);
typedef void (*ChatSistOS__NewUser_Closure)
                 (const ChatSistOS__NewUser *message,
                  void *closure_data);
typedef void (*ChatSistOS__Status_Closure)
                 (const ChatSistOS__Status *message,
                  void *closure_data);
typedef void (*ChatSistOS__Message_Closure)
                 (const ChatSistOS__Message *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor chat_sist_os__user_list__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__users_online__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__user_option__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__answer__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__user__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__new_user__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__status__descriptor;
extern const ProtobufCMessageDescriptor chat_sist_os__message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_chat_2eproto__INCLUDED */
